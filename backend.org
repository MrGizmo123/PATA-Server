#+title: PATA Backend
#+author: Hrushikesh Patwardhan

#+property: header-args :results none :tangle server.lisp

* What is it?

It is the backend of the PICT Attendance Tracker App. It is written in
common lisp. It is an HTTP server. It roughly resembles a RESTful API

** Dependencies
This server is written in Common Lisp (SBCL). It depends on the
following libraries:
+ ~hunchentoot~ A simple http server
+ ~ironclad~ An encryption library used to hash the passwords
+ ~flexi-streams~ A library to make handling SHA256 digests easy
+ ~cl-csv~ To read from and write to csv files
+ ~cl-json~ To convert Lisp objects into json format to send it to the
  app

** Server

*** What is it?
This is the backend of the PICT Attendance Tracker App (PATA). It will
handle data management and run an http server that provides the
information to the app.

The ~quicklisp~ package management system is used to load these
libraries

#+begin_src lisp :results none
(ql:quickload :hunchentoot)
(ql:quickload "ironclad")
(ql:quickload :flexi-streams)
(ql:quickload :cl-csv)
(ql:quickload :cl-json)
#+end_src


*** Utils

Some utility functions

**** Timestamp Function

Returns a properly formatted timestamp, according to server time. This
is placed on the attendance sheets

#+begin_src lisp
(setf path "/home/liquidcat/proj/PATA-Server/")

(defparameter *day-names*
  '("Monday" "Tuesday" "Wednesday"
    "Thursday" "Friday" "Saturday"
    "Sunday"))

(defun timestamp ()
  "returns current timestamp according to the server"
  (multiple-value-bind
        (second minute hour day month year day-of-week dst-p tz)
      (get-decoded-time)
    (format nil "~2,'0d:~2,'0d:~2,'0d ~d/~2,'0d/~d"
	    hour
	    minute
	    second
	    day
	    month
	    year)))

#+end_src

#+RESULTS:
: TIMESTAMP


**** Server utils

Creates a Hunchentoot Server. 

#+begin_src lisp
(defvar *server* (make-instance 'hunchentoot:easy-acceptor :port 4242))

(defun start-server ()
  "runs the server"
  (hunchentoot:start *server*))

(defun stop-server ()
  "stops the server"
  (hunchentoot:stop *server*))

(defun restart-server ()
  "restarts the server"
  (stop-server)
  (start-server))

#+end_src

#+RESULTS:
: RESTART-SERVER


*** Handlers
These are basically functions which are bound to addresses on the
server. For example,
+ The address ~<server-addr>/login~ will be bound to the function
  ~(login user pass)~.
+ When a ~GET~ request is made to the address ~<server-addr>/login~,
  this function will be called.
+ The arguments ~user~ and ~pass~ will be bound to the query
  parameters of the url
+ Consider that a ~GET~ request is made with the url:
  ~<server-addr>/login?user=acbd&pass=1234~, the function ~(login)~
  will be called with the parameters ~user = "abcd"~, ~pass = 1234~.
  Like so ~(login "abcd" "1234")~
+ The standard output ~(format nil <output>)~ of this function is then
  returned as the body of the response from the server.
  
**** Login
This handles the login request

#+RESULTS:
: ATTEMPT-LOGIN

+ This is the actual server handler
+ It is bound to the address ~<server-addr>/login~
+ It takes 2 parameters (http query parameters)
  + The username
  + The password hash
+ It returns a json formatted string which contains a property
  ~status~ which is either ~true~ or ~false~
+ It also contains an ~id~ property which contains the abbreviation of
  the teachers name if the login corresponds to a teacher

#+begin_src lisp
(defun caddddr (list)
  (car (cddddr list)))

(hunchentoot:define-easy-handler (login :uri "/login") (user pass)
  (setf (hunchentoot:content-type*) "text/plain")
  (let* ((credentials (attempt-login user pass))
	 (status (if credentials "success" "failure"))
	 (isFaculty (if (caddr credentials) "true" "false"))
	 (id (caddddr credentials))
	 (UID (car credentials)))
    (format nil (cl-json:encode-json-plist-to-string
		 `(:status ,status :isFaculty ,isFaculty :id ,id :uid ,UID)))))
#+end_src

#+RESULTS:
: LOGIN

**** Upload Attendance
This handles the upload attendance request.
+ The http query parameter ~absent~ is a comma separated list of the
+ It is bound to the path ~<server-addr>/uploadAttendance~
+ Right now it simply writes the attendance to the file ~attendance~

#+begin_src lisp
(hunchentoot:define-easy-handler (say-yo :uri "/uploadAttendance") (user pass subject present)
  (setf (hunchentoot:content-type*) "text/plain")
  (let ((credentials (attempt-login user pass)))
    (if (caddr credentials)
	(loop for roll-number in (split-sequence:split-sequence #\, present)
	      for student-data = (query (list roll-number subject) *attendance-data*)
	      do (incf (cdar student-data))
	      do (incf (cdadr student-data))))
  (format nil "done")))
#+end_src

#+RESULTS:
: SAY-YO

**** Schedule Handler

This handles the ~getSchedule~ request
+ This queries the database generated by the [[file:data-management.org][data-management]] part of
  the code by using the ~query~ function
+ It is bound to the route ~<server-addr>/getSchedule~
+ It takes 3 arguments (http query parameters)
  + the username ~user~
  + the password hash ~pass~
  + the scope of the query ~scope~
+ The ~scope~ is a string like
  + "KDK" - returns the weekly schedule for teacher with abbreviation KDK
  + "KDK,Tue" - returns the schedule for Tuesday for teacher KDK
  + "KDK,Wed,9:00" - returns the schedule for 9:00 AM on Wednesday for KDK

+ It returns the corresponding data from the timetable. An example of
  a return value for *scope="KDK,Mon"* would be

:   {
:       "8:00": "A10",
:       "9:00": "A10",
:       "10:15": "FE3",
:       "11:15": "FE4",
:       "13:00": "FE5",
:       "14:00": "FE6"
:   }

#+begin_src lisp
(hunchentoot:define-easy-handler (get-schedule :uri "/getSchedule") (user pass scope)
  (setf (hunchentoot:content-type*) "text/plain")
  (let ((credentials (attempt-login user pass))
	(split-scope (split-sequence:split-sequence #\, scope))) ;splits the input at commas
    (if (caddr credentials)		;only faculty will have id
	(format nil
		(cl-json:encode-json-alist-to-string
		 (query (cons (car credentials) split-scope)
			*timetable*)))
	(format nil "no schedule found"))))
#+end_src

#+RESULTS:
: GET-SCHEDULE

**** Get Attendance

This will provide the attendance data for the student to view.
+ It queries the table of the students attendance
+ gets the relevant data as an alist (it is stored as an alist)
+ converts the alist to JSON format
+ returns the JSON as the response

It takes parameters
+ ~user~ - the username
+ ~pass~ - the password hash

#+begin_src lisp

(hunchentoot:define-easy-handler (get-attendance :uri "/getAttendance") (user pass)
  (setf (hunchentoot:content-type*) "text/plain")
  (if (attempt-login user pass)
      (let ((attendance (query (list user) *attendance-data*)))
	(format nil "~a" (cl-json:encode-json-alist-to-string attendance)))))

#+end_src


**** Get Batch

This handles the ~getBatch~ request
+ It queries the ~*batches*~ table
+ It returns the list of roll numbers associated with a certain batch

#+begin_src lisp

(hunchentoot:define-easy-handler (get-batch :uri "/getBatch") (batch)
  (setf (hunchentoot:content-type*) "text/plain")
  ;;(format *standard-output* batchName)
  (format nil
	  (cl-json:encode-json-alist-to-string
	   (list (cons "members" (query (list batch)
		  *batches*))))))

#+end_src


** Database

*** What is it?
It is where the collection of functions relating to data storage of
the PICT Attendance Tracker App.

*** Login Database

The Hash string function takes a string and returns the string
representation of the SHA256 hash of the input. This is used to hash
passwords

#+begin_src lisp
(defun hash-string (string)
  "returns the SHA256 hash of STRING as a string"
  (ironclad:byte-array-to-hex-string
   (ironclad:digest-sequence :sha256
			     (flexi-streams:string-to-octets string))))

#+end_src

#+RESULTS:
: HASH-STRING

+ The ~*logins*~ variable store the data of all the students and teachers

#+begin_src lisp
(defparameter *logins* nil)
(defparameter *current-login-UID* 0)
#+end_src

#+begin_src lisp
(defun load-logins ()
  "loads the data from the logins file"
  (load #P"logins"))

(defun assert-logins-loaded ()
  "checks if the logins file has been loaded, if not then loads it"
  (if (not *logins*)
      (load-logins)))
#+end_src

#+RESULTS:
: ASSERT-LOGINS-LOADED

The ~save-login-data~ function takes the variable ~*logins*~ and writes it
out to the file ~logins~

#+begin_src lisp
(defun save-login-data ()
  "saves the logins variable to the file logins to be read later when the
server is restarted"
  (with-open-file (fstream #P"logins"
			   :direction :output
			   :if-exists :supersede
			   :if-does-not-exist :create)
    (format fstream "~s~%" `(defparameter *logins* (quote ,*logins*)))))
#+end_src


The ~add-login~ function takes
+ a username
+ a password hash
+ optionally if the user is part of the faculty (default false)
+ optionally if it should immediately update the ~logins~ file (default true)

#+begin_src lisp
(defun add-login (user pass &key (faculty nil) (save-logins t))
  "hashes and stores the password in the login file"
  (let ((pass-hash (hash-string pass)))
    (assert-logins-loaded)
    (setf *logins* (nconc *logins* (list (list user pass-hash faculty))))
    (if save-logins (save-login-data))))
#+end_src

#+RESULTS:
: ADD-LOGIN

+ The function ~attempt-login~ checks the ~logins~ file to see if
  there is an entry corresponding to the input ~user~ and ~pass~
+ ~pass~ is of course the hash of the password, not the actual password
+ The ~logins~ file is a csv file, it is currently formatted like so
  + Each entry has 3 parts, comma separated: ~<Name>, <Password-Hash>, <isFaculty>, <ID>~
  + When parsed by ~cl-csv~, it returns a list of lists containing,
    the entries for example are like this:
    
:     (("11011" "skdjalskdjlefseifjlsdkjfslkdglskdjglsegilihlih" NIL)  ; ID is roll no for student
:      ("12021" "lsdkfjslkdjflseifjlsieglfdhgkjfhdkuhrgugjvhsle" NIL)
:      ("KDK" "mioiukjrtkjfglifguldifjglsieruslidfjglsidkjufg" T)) ; ID is Abbreviation fir teachers

#+begin_src lisp
(defun attempt-login (user pass)
  "Checks the credentials and returns the entry of fields as a
list."
  (assert-logins-loaded)
  (let ((result))
    (loop for cred in *logins*
	  do (if (and (string= (car cred) user) (string= (cadr cred) pass)) ; (car cred) is the username (first entry), (cadr cred) is the pass hash (second entry)
		 (setf result cred)))
    result))
#+end_src

#+RESULTS:
: ATTEMPT-LOGIN

*** Attendance Database

This also works on the variable ~*logins*~, it handles the attendance
data part of the dataset

**** Data Import

These functions will import the data from the csv's generated from the
data provided by the college.

+ Read the source csv
+ Create entry in the ~logins~ file with some default passwd (maybe their roll no)
+ Convert the attendance data into an alist
+ wrtie the alist to the ~attendance-data~ file
+ ensure that the UID in the ~logins~ and ~attendance-data~ matches

#+begin_src lisp
(defparameter *attendance-data* nil)
#+end_src

#+begin_src lisp

					; subject list for FE7-FE12 is: '("EM-2" "PHY" "BEE" "EM" "EG" "ES-2" "CS" "EM-2-Prac" "PHY-Prac" "BEE-Prac" "EM-Prac" "EG-Prac" "CAD-Prac" "PBL-Prac")

(defun get-generic-password (entry)
  "gets a generic but unique password for each entry (eg the roll no)"
  (car entry))				;roll no

(defun import-student-data (filename subjects)
  "imports the data from the college csv files"
  (let ((raw-data (cl-csv:read-csv (pathname filename))))
    (with-open-file (logins "logins" :direction :output
				     :if-exists :append
				     :if-does-not-exist :create)
      (setf *attendance-data* (nconc *attendance-data* (loop for entry in raw-data
							     do (add-login (car entry) (get-generic-password entry) :faculty nil :save-logins nil)
							     collect (cons (car entry)
									   (loop for present in (cddr entry) by #'cddr ;no of lectures they were present
										 for total in (cdddr entry) by #'cddr ;no of lectures they were absent
										 for subject in subjects ;the subject which the above data is for
										 collect `(,subject ("present" . ,(parse-integer present)) ("total" . ,(parse-integer total))))) ;collect into alist
							     finally (save-server-state)))))))
#+end_src

**** Loading Server Data

This loads the server to the state that it was in when it last saved

#+begin_src lisp
(defun save-attendance-data ()
  "Saves the variable *ATTENDANCE-DATA* to the file
attendance-data. Stores the string representation of the variable to
the file. Later this file can just be evaluated to get the value of
,*ATTENDANCE-DATA* back"
  (with-open-file (fstream #P"attendance-data"
			   :direction :output
			   :if-exists :supersede
			   :if-does-not-exist :create)
    (format fstream "~s~%" `(defparameter *attendance-data* (quote ,*attendance-data*)))))

(defun load-attendance-data ()
  "loads the attendance data from file attendance-data"
  (load #P"attendance-data"))

(defun assert-attendance-loaded ()
  "guarantees that the attenance has been loaded and that *ATTENDANCE-DATA* is not nil"
  (if (not *attendance-data*)
      (load-attendance-data)))

(defun load-server-state ()
  (assert-logins-loaded)
  (assert-attendance-loaded))

(defun save-server-state ()
  (save-login-data)
  (save-attendance-data))

#+end_src

#+RESULTS:
: IMPORT-STUDENT-DATA

*** Batches Database

This is he part of the database which associates batch names with the
roll numbers of the members of those batches.
+ It creates a variable called ~*batches*~
+ ~*batches*~ is an alist containing the associations
+ A single roll number may appear twice e.g. ~11018~ is in ~FE10~ as
  well as ~A10~
+ It requires that the logins be loaded

#+begin_src lisp

(defvar *batches* nil)

(defun add-to-batch (batch roll-number)
  "Checks if BATCH already exists in *BATCHES*, if it does, then add the
ROLL-NUMBER to it, else it creates an association with that key and
adds the ROLL-NUMBER to it"
  (let ((batch-data (assoc batch *batches* :test #'string=)))
    (if batch-data
        (if (not (member roll-number batch-data :test #'string=))
            (setf (cdr batch-data) (cons roll-number (cdr batch-data))))
        (setf *batches* (acons batch (list roll-number) *batches*))))
  ,*batches*)

(defun generate-batches ()
  "generates an alist which associates batch names with the member roll
numbers. It is possible that one roll number appears in 2 batches"
  (assert-logins-loaded)
  (setf *batches* nil)
  (loop for element in (reverse *logins*)
        if (not (caddr element))	; check if its a student
          do (let* ((member (car element))
		    (year-number (parse-integer (subseq member 0 1)))
                    (class-number (subseq member 1 3))
                    (roll-number (parse-integer (subseq member 3)))
                    (year (cond ((= year-number 1) "FE")
                                ((= year-number 2) "SE")
                                ((= year-number 3) "TE")
                                (t "BE")))
                    (practical-batch-prefix (cond ((<= roll-number 25) "A")
                                                  ((<= roll-number 50) "B")
                                                  (t "C")))
                    (theory-batch (concatenate 'string year class-number))
                    (practical-batch (concatenate 'string practical-batch-prefix class-number)))
               (add-to-batch theory-batch member)
               (add-to-batch practical-batch member))))

#+end_src


*** Timetable Database

#+name: KDK-timetable
|  Time | Mon | Tue  | Wed  | Thu | Fri  | Sat | Sun            |
|  8:00 | A10 | FE11 | FE10 | FE3 | FE9  | FE2 | A10 : PHY-Prac |
|  9:00 | A10 | FE12 | FE11 | FE4 | FE10 | FE3 | B10 : EM       |
| 10:15 | FE3 | FE13 | FE12 | FE5 | FE11 | FE4 | C10 : EM-2     |
| 11:15 | FE4 | FE1  | FE13 | FE6 | FE12 | FE5 | FE10: PHY      |
| 13:00 | FE5 | FE2  | FE1  | FE7 | FE13 | FE6 | FE12: ES-2     |
| 14:00 | FE6 | FE3  | FE2  | FE8 | FE1  | FE7 | FE13: PHY      |

#+begin_src lisp :var input=KDK-timetable :results verbatim
(ql:quickload :cl-json)

(defun strip-timings (data)
  "removes the first element of each row of table to get rid of the
timings. Does the opposite of GET-TIMINGS"
  (loop for row in data
	collect (cdr row)))

(defun get-timings (data)
  "gets only the timings from input, does the opposite of STRIP-TIMINGS"
  (loop for row in (cdr data)		; cdr of data to discard the "Time" column title
	collect (car row)))

(defun transpose (data)
  "transposes the input table so that the timetable for each day is
contained in one list."
  (loop for day in (car data)
	for i from 0
	collect (loop for elem in (cdr data)
		      collect  (nth i elem))))

(defun transpose-and-label (data)
  "transposes the input table so that the timetable for each day is
contained in one list. Also labels the data for readable JSON
representation"
  (loop for day in (car data)
	for i from 0
	collect (cons day  (loop for elem in (cdr data)
				 collect (cons "time" (nth i elem))))))

(defun apply-timings (transposed-data timings)
  "Applies the timings to the transposed data. In most cases
TRANSPOSED-DATA should be output of function TRANSPOSE. TIMINGS should
be output of function GET-TIMINGS"
  (loop for day in transposed-data
	do (loop for lecture in (cdr day)
		 for timing in timings
		 do (setf (car lecture) timing)))
  transposed-data)

(defun apply-teacher-name (data teacher-name)
  "Takes output of function APPLY-TIMINGS and adds a property at the
beginning which indicates the teachers name"
  (list (cons teacher-name data)))

(defun query (keys table &key (test #'string=))
  "Queries the TABLE recursively by using KEYS"
  (if keys
      (query (cdr keys) (cdr (assoc (car keys) table :test test)))
      table))

(setf *timetable* (apply-teacher-name (apply-timings (transpose-and-label (strip-timings input)) (get-timings input)) "KDK"))

#+end_src
